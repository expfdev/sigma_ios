// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name SigmaSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import CommonCrypto
import CryptoKit
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol SigmaExperiment {
  #if compiler(>=5.3) && $NonescapableTypes
  var groupIndex: Swift.Int? { get }
  #endif
  @available(*, deprecated, message: "Will be removed in future releases.")
  var name: Swift.String { get }
  #if compiler(>=5.3) && $NonescapableTypes
  @available(*, deprecated, message: "Will be removed in future releases.")
  var userGroupName: Swift.String? { get }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  func getParamValue<T>(name: Swift.String) -> T? where T : SigmaSDK.SigmaPropertyType
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  func getFeatureValue<T>(flagName: Swift.String) throws -> T? where T : SigmaSDK.SigmaPropertyType
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(*, deprecated, renamed: "getFeatureValue(flagName:)")
  func getFeatureFlagValue<T>(flagName: Swift.String) throws -> T? where T : SigmaSDK.SigmaPropertyType
  #endif
}
public typealias SigmaSuccessCallback<T> = (T) -> Swift.Void
public typealias SigmaErrorCallback = (SigmaSDK.SigmaError) -> Swift.Void
public protocol SigmaClient {
  func setUser(_ user: SigmaSDK.SigmaUser)
  func setUserProperties(builder: (SigmaSDK.SigmaUser.Builder) -> SigmaSDK.SigmaUser.Builder)
  func editUserProperties(builder: (SigmaSDK.SigmaUser.Builder) -> SigmaSDK.SigmaUser.Builder)
  func clearUserProperties()
  #if compiler(>=5.3) && $NonescapableTypes
  func checkFlag<T>(flagName: Swift.String, onSuccess: SigmaSDK.SigmaSuccessCallback<T?>?, onError: SigmaSDK.SigmaErrorCallback?) where T : SigmaSDK.SigmaPropertyType
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 13, *)
  func checkFlag<T>(flagName: Swift.String) async throws -> T? where T : SigmaSDK.SigmaPropertyType
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  func getUserFeatureFlagsDetails(onSuccess: SigmaSDK.SigmaSuccessCallback<[Swift.String : any SigmaSDK.SigmaPropertyType]>?, onError: SigmaSDK.SigmaErrorCallback?)
  #endif
  @available(iOS 13, *)
  func getUserFeatureFlagsDetails() async throws -> [Swift.String : any SigmaSDK.SigmaPropertyType]
  #if compiler(>=5.3) && $NonescapableTypes
  func getAllUserExperiments(onSuccess: SigmaSDK.SigmaSuccessCallback<Swift.String?>?, onError: SigmaSDK.SigmaErrorCallback?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 13, *)
  func getAllUserExperiments() async throws -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  func getAllUserExperiments(estimateHoldouts: Swift.Bool, onSuccess: SigmaSDK.SigmaSuccessCallback<Swift.String?>?, onError: SigmaSDK.SigmaErrorCallback?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 13, *)
  func getAllUserExperiments(estimateHoldouts: Swift.Bool) async throws -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  func getExperiment(name: Swift.String, onSuccess: SigmaSDK.SigmaSuccessCallback<(any SigmaSDK.SigmaExperiment)?>?, onError: SigmaSDK.SigmaErrorCallback?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 13, *)
  func getExperiment(name: Swift.String) async throws -> (any SigmaSDK.SigmaExperiment)?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  func getHoldout(name: Swift.String, onSuccess: SigmaSDK.SigmaSuccessCallback<Swift.Bool>?, onError: SigmaSDK.SigmaErrorCallback?)
  #endif
  @available(iOS 13, *)
  func getHoldout(name: Swift.String) async throws -> Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  func getAllUserHoldouts(onSuccess: SigmaSDK.SigmaSuccessCallback<Swift.String?>?, onError: SigmaSDK.SigmaErrorCallback?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 13, *)
  func getAllUserHoldouts() async throws -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  func getUserExperimentsDetails(estimateHoldouts: Swift.Bool, onSuccess: SigmaSDK.SigmaSuccessCallback<[SigmaSDK.SigmaExperimentDetail]>?, onError: SigmaSDK.SigmaErrorCallback?)
  #endif
  @available(iOS 13, *)
  func getUserExperimentsDetails(estimateHoldouts: Swift.Bool) async throws -> [SigmaSDK.SigmaExperimentDetail]
  #if compiler(>=5.3) && $NonescapableTypes
  func getUserExperimentsDetails(onSuccess: SigmaSDK.SigmaSuccessCallback<[SigmaSDK.SigmaExperimentDetail]>?, onError: SigmaSDK.SigmaErrorCallback?)
  #endif
  @available(iOS 13, *)
  func getUserExperimentsDetails() async throws -> [SigmaSDK.SigmaExperimentDetail]
  #if compiler(>=5.3) && $NonescapableTypes
  func includeForce(experimentName: Swift.String, groupIndex: Swift.Int?, onSuccess: SigmaSDK.SigmaSuccessCallback<Swift.Void>?, onError: SigmaSDK.SigmaErrorCallback?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 13, *)
  func includeForce(experimentName: Swift.String, groupIndex: Swift.Int?) async throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  func includeForce(experimentName: Swift.String, onSuccess: SigmaSDK.SigmaSuccessCallback<Swift.Void>?, onError: SigmaSDK.SigmaErrorCallback?)
  #endif
  @available(iOS 13, *)
  func includeForce(experimentName: Swift.String) async throws
  #if compiler(>=5.3) && $NonescapableTypes
  func excludeForce(experimentName: Swift.String, onSuccess: SigmaSDK.SigmaSuccessCallback<Swift.Void>?, onError: SigmaSDK.SigmaErrorCallback?)
  #endif
  @available(iOS 13, *)
  func excludeForce(experimentName: Swift.String) async throws
  #if compiler(>=5.3) && $NonescapableTypes
  func excludeForceAll(onSuccess: SigmaSDK.SigmaSuccessCallback<Swift.Void>?, onError: SigmaSDK.SigmaErrorCallback?)
  #endif
  @available(iOS 13, *)
  func excludeForceAll() async throws
  #if compiler(>=5.3) && $NonescapableTypes
  @available(*, deprecated, message: "Will be removed in future releases.")
  func getAllUserExperiments(onSuccess: SigmaSDK.SigmaSuccessCallback<[any SigmaSDK.SigmaExperiment]>?, onError: SigmaSDK.SigmaErrorCallback?)
  #endif
  @available(iOS 13, *)
  @available(*, deprecated, message: "Will be removed in future releases.")
  func getAllUserExperiments() async throws -> [any SigmaSDK.SigmaExperiment]
}
public protocol SigmaPropertyType {
  #if compiler(>=5.3) && $NonescapableTypes
  init?(sigmaString: Swift.String)
  #endif
}
extension Swift.Bool : SigmaSDK.SigmaPropertyType {
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(sigmaString: Swift.String)
  #endif
}
extension Swift.Int : SigmaSDK.SigmaPropertyType {
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(sigmaString: Swift.String)
  #endif
}
extension Swift.Double : SigmaSDK.SigmaPropertyType {
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(sigmaString: Swift.String)
  #endif
}
extension Swift.String : SigmaSDK.SigmaPropertyType {
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(sigmaString: Swift.String)
  #endif
}
extension Swift.Dictionary : SigmaSDK.SigmaPropertyType where Key == Swift.String, Value == Any {
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(sigmaString: Swift.String)
  #endif
}
public enum SigmaError : Swift.Error, Swift.CustomStringConvertible {
  case initializationOfExistingClient(tag: Swift.String)
  case requestConfigFailed(SigmaSDK.SigmaNetworkError)
  case requestLocationFailed(SigmaSDK.SigmaNetworkError)
  case featureFlagNotFound(featureFlag: Swift.String)
  case featureFlagNoRules(featureFlag: Swift.String)
  case featureFlagRulesNotSatisfied(featureFlag: Swift.String)
  case experimentsEmpty
  case experimentNotFound(experiment: Swift.String)
  case experimentGroupNotMatchingFeatureFlagGroup(experiment: Swift.String, featureFlag: Swift.String, userGroup: Swift.String, featureFlagGroups: [Swift.String])
  case experimentSplitIdNotFound(experiment: Swift.String)
  case experimentGroupIndexNotFound(experiment: Swift.String, index: Swift.Int)
  case experimentAlreadyContainsUser(experiment: Swift.String)
  case experimentGroupAlreadyContainsUser(experiment: Swift.String, index: Swift.Int)
  case holdoutNotFound(holdout: Swift.String)
  case noForceIncludedExperiments
  public var description: Swift.String {
    get
  }
}
public enum SigmaNetworkError : Swift.Error, Swift.CustomStringConvertible {
  case incorrectURL(Swift.String)
  case urlError(any Swift.Error)
  case wrongStatusCode(Swift.Int)
  case decodingError(any Swift.Error)
  case noData
  case customError(Swift.String)
  public var description: Swift.String {
    get
  }
}
public struct SigmaExperimentDetail : Swift.Equatable {
  public struct Group : Swift.Equatable {
    public let index: Swift.Int
    public static func == (a: SigmaSDK.SigmaExperimentDetail.Group, b: SigmaSDK.SigmaExperimentDetail.Group) -> Swift.Bool
  }
  public struct Result : Swift.Equatable {
    public let name: Swift.String
    public let value: Swift.String
    public static func == (a: SigmaSDK.SigmaExperimentDetail.Result, b: SigmaSDK.SigmaExperimentDetail.Result) -> Swift.Bool
  }
  public let type: Swift.String?
  public let id: Swift.String
  public let group: SigmaSDK.SigmaExperimentDetail.Group
  public let results: [SigmaSDK.SigmaExperimentDetail.Result]
  public static func == (a: SigmaSDK.SigmaExperimentDetail, b: SigmaSDK.SigmaExperimentDetail) -> Swift.Bool
}
public struct SigmaUser : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SigmaSDK.SigmaUser {
  @_hasMissingDesignatedInitializers final public class Builder {
    public init()
    #if compiler(>=5.3) && $NonescapableTypes
    final public func setUserId(_ id: Swift.String?) -> SigmaSDK.SigmaUser.Builder
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    final public func setProfileId(_ id: Swift.String?) -> SigmaSDK.SigmaUser.Builder
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    final public func setDeviceId(_ id: Swift.String?) -> SigmaSDK.SigmaUser.Builder
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    final public func setAppVersion(_ version: Swift.String?) -> SigmaSDK.SigmaUser.Builder
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    final public func setOsName(_ name: Swift.String?) -> SigmaSDK.SigmaUser.Builder
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    final public func setOsVersion(_ version: Swift.String?) -> SigmaSDK.SigmaUser.Builder
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    final public func setGeoCode(_ code: Swift.String?) -> SigmaSDK.SigmaUser.Builder
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    final public func setGeoCountry(_ country: Swift.String?) -> SigmaSDK.SigmaUser.Builder
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    final public func setGeoState(_ state: Swift.String?) -> SigmaSDK.SigmaUser.Builder
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    final public func setGeoCity(_ city: Swift.String?) -> SigmaSDK.SigmaUser.Builder
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    final public func setEmail(_ email: Swift.String?) -> SigmaSDK.SigmaUser.Builder
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    final public func setCustomProperty<Value>(_ value: Value?, key: Swift.String) -> SigmaSDK.SigmaUser.Builder where Value : Swift.CustomStringConvertible
    #endif
    final public func build() -> SigmaSDK.SigmaUser
    @objc deinit
  }
}
public enum Sigma {
  public static let defaultClientTag: Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  public static func initializeClient(projectToken: Swift.String, initialUser: SigmaSDK.SigmaUser? = nil, apiURL: Swift.String = "https://api.expf.ru/api/v1/", cacheTTL: Swift.UInt = 10, retryCount: Swift.UInt = 0, tag: Swift.String = Sigma.defaultClientTag) throws -> any SigmaSDK.SigmaClient
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func getClient(tag: Swift.String = Sigma.defaultClientTag) -> (any SigmaSDK.SigmaClient)?
  #endif
  public static func removeClient(tag: Swift.String = Sigma.defaultClientTag)
}
